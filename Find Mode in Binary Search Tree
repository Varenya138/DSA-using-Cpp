/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> findMode(TreeNode* root) {
        unordered_map<int, int> count;
        inorder(root, count);
        int maxCount = 0;
        for (auto& p : count) {
            maxCount = max(maxCount, p.second);
        }
        vector<int> modes;
        for (auto& p : count) {
            if (p.second == maxCount) {
                modes.push_back(p.first);
            }
        }
        return modes;
    }
    
    void inorder(TreeNode* node, unordered_map<int, int>& count) {
        if (node) {
            inorder(node->left, count);
            count[node->val]++;
            inorder(node->right, count);
        }
    }
};
