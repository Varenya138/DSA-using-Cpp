/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        return find(root, root, k);
    }
    
    bool find(TreeNode* root, TreeNode* curr, int k) {
        if (!curr) 
        return false;
        int complement = k - curr->val;
        if (findValue(root, complement, curr)) 
        return true;
        return find(root, curr->left, k) || find(root, curr->right, k);
    }
    
    bool findValue(TreeNode* root, int val, TreeNode* curr) {
        if (!root) return false;
        if (root->val == val && root != curr) return true;
        if (root->val < val) return findValue(root->right, val, curr);
        return findValue(root->left, val, curr);
    }
};
